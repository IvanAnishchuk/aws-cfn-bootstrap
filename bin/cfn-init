#!/usr/bin/env python

#==============================================================================
# Copyright 2011 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License"). You may not use
# this file except in compliance with the License. A copy of the License is
# located at
#
#       http://aws.amazon.com/asl/
#
# or in the "license" file accompanying this file. This file is distributed on
# an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
# implied. See the License for the specific language governing permissions
# and limitations under the License.
#==============================================================================

import cfnbootstrap
from cfnbootstrap.cfn_client import CloudFormationClient
from optparse import OptionParser
from optparse import OptionGroup
from cfnbootstrap.construction import Contractor
from cfnbootstrap import util
import sys
import logging
import os
try:
    import simplejson as json
except ImportError:
    import json

parser = OptionParser()
creds_group = OptionGroup(parser, "AWS Credentials", "Options for specifying AWS Account Credentials. The credential file supercedes any other specification of credentials.")
creds_group.add_option("-f", "--credential-file", help="A credential file, readable only by the owner, with keys 'AWSAccessKeyId' and 'AWSSecretKey'",
                       type="string", dest="credential_file")
creds_group.add_option("", "--access-key", help="An AWS Access Key",
                       type="string", dest="access_key")
creds_group.add_option("", "--secret-key", help="An AWS Secret Key",
                       type="string", dest="secret_key")

parser.add_option_group(creds_group)
parser.add_option("-s", "--stack", help="A CloudFormation stack",
                  type="string", dest="stack_name")
parser.add_option("-r", "--resource", help="A CloudFormation logical resource ID",
                  type="string", dest="logical_resource_id")

parser.add_option("-c", "--configsets", help='An optional list of configSets (default: "default")',
                  type="string", dest="configsets")

parser.add_option("-u", "--url", help="The CloudFormation service URL",
                  type="string", dest="endpoint")
parser.add_option("", "--region", help="The CloudFormation region. Default: us-east-1. Ignored if url is specified.",
                  type="string", dest="region")

parser.add_option("-v", "--verbose", help="Enables verbose logging",
                  action="store_true", dest="verbose")

(options, args) = parser.parse_args()

if not options.credential_file and (not options.access_key or not options.secret_key):
    print >> sys.stderr, "Error: You must specify either a credential file or access key/secret key pair"
    parser.print_help(sys.stderr)
    exit(1)

if not options.stack_name or not options.logical_resource_id:
    print >> sys.stderr, "Error: You must specify both a stack name and logical resource id"
    parser.print_help(sys.stderr)
    exit(1)

cfnbootstrap.configureLogging("DEBUG" if options.verbose else "INFO")

if options.credential_file:
    try:
        access_key, secret_key = util.extract_credentials(options.credential_file)
    except IOError, e:
        print >> sys.stderr, "Error retrieving credentials from file:\n\t%s" % e.strerror
        exit(1)
else:
    access_key = options.access_key
    secret_key = options.secret_key

url = None
if options.endpoint:
    url = options.endpoint
elif options.region:
    url = CloudFormationClient.endpointForRegion(options.region)

configSets = ["default"]
if options.configsets:
    configSets = options.configsets.split(',')

try:
    detail = CloudFormationClient(access_key, secret_key, url=url).describe_stack_resource(options.logical_resource_id, options.stack_name)
except IOError, e:
    if e.strerror:
        print >> sys.stderr, e.strerror
    else:
        print >> sys.stderr, "Unknown error retrieving %s" % options.logical_resource_id
    exit(1)

if not detail.metadata:
    print >> sys.stderr, "Error: %s does not specify any metadata" % detail.logicalResourceId
    exit(1)

if os.name == 'nt':
    dir = os.path.expandvars('${SystemDrive}\cfn\cfn-init\data')
else:
    dir = '/var/lib/cfn-init/data'
if not os.path.isdir(dir) and not os.path.exists(dir):
    os.makedirs(dir)

if os.path.isdir(dir):
    with file('%s%smetadata.json' % (dir, os.sep), 'w') as f:
        json.dump(detail.metadata, f, indent=4)
else:
    print >> sys.stderr, "Could not create %s to store metadata" % dir
    logging.error("Could not create %s to store metadata", dir)

if Contractor.metadataValid(detail.metadata):
    try:
        Contractor(detail.metadata).build(configSets)
    except Exception, e:
        print >> sys.stderr, "Error occurred during build: %s" % str(e)
        logging.exception("Unhandled exception during build: %s", str(e))
        exit(1)
else:
    print >> sys.stderr, "No work to do, exiting."
    exit(0)
